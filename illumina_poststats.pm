#!/usr/bin/perl -w

##################################################################################################################################################
###This script is designed to run picard metrics per sample and create a PDF summary using the ..... tool generated by R.F. Ernst
###
###
###Author: S.W.Boymans
###Latest change: Created skeleton
###
###TODO: A lot
##################################################################################################################################################

package illumina_poststats;

use strict;
use POSIX qw(tmpnam);
use FindBin;

sub runPostStats {
    my $configuration = shift;
    my %opt = %{readConfiguration($configuration)};
    my $picard = "java -Xmx16G -jar $opt{PICARD_PATH}";

    ### Parse fastq input to get sample names.
    my %samples;
    foreach my $input (keys %{$opt{FASTQ}}){
	my $fastqFile = (split("/", $input))[-1];
	my $sampleName =  (split("_", $fastqFile))[0];
	$samples{$sampleName} ++;
    }
    
    ### Run Picard for each sample
    foreach my $sample (keys(%samples)){
	my $jobID;
	my $bam = $opt{OUTPUT_DIR}."/".$sample."/mapping/".$sample."_dedup.bam";

	my $picardOut = $opt{OUTPUT_DIR}."/".$sample."/picardStats/";
	unless(-e $picardOut or mkdir $picardOut) { die "Unable to create $picardOut \n"; }
	
	### Multiple metrics
	my $command = $picard."/CollectMultipleMetrics.jar VALIDATION_STRINGENCY=LENIENT R=$opt{GENOME} ASSUME_SORTED=TRUE OUTPUT=".$picardOut.$sample."_MultipleMetrics.txt INPUT=$bam PROGRAM=CollectAlignmentSummaryMetrics PROGRAM=CollectInsertSizeMetrics PROGRAM=QualityScoreDistribution PROGRAM=QualityScoreDistribution\n";
	$jobID = bashAndSubmit($command,$sample,\%opt);
	push(@{$opt{RUNNING_JOBS}->{'all'} }, $jobID);
	
	### Library Complexity
	$command = $picard."/EstimateLibraryComplexity.jar VALIDATION_STRINGENCY=LENIENT OUTPUT=".$picardOut.$sample."_LibComplexity.txt INPUT=$bam";
	$jobID = bashAndSubmit($command,$sample,\%opt);
	push(@{$opt{RUNNING_JOBS}->{'all'} }, $jobID);
	
	### Calculate HSMetrics -> only if target/bait file are present.
	if ( ($opt{POSTSTATS_TARGETS}) && ($opt{POSTSTATS_BAITS}) ) {
	    $command = $picard."/CalculateHsMetrics.jar VALIDATION_STRINGENCY=LENIENT R=$opt{GENOME} OUTPUT=".$picardOut.$sample."_HSMetrics.txt INPUT=$bam BAIT_INTERVALS=$opt{POSTSTATS_BAITS} TARGET_INTERVALS=$opt{POSTSTATS_TARGETS} METRIC_ACCUMULATION_LEVEL=SAMPLE";
	    $jobID = bashAndSubmit($command,$sample,\%opt);
	    push(@{$opt{RUNNING_JOBS}->{'all'} }, $jobID);
	}
    }
    ### Run plotilluminametrics
    my $command = "perl $FindBin::Bin/modules/plotilluminametrics/plotIlluminaMetrics.pl ".join(" ",keys(%samples) );
    
    my $jobID = get_job_id();
    my $bashFile = $opt{OUTPUT_DIR}."/jobs/PICARD_".$jobID.".sh";
    my $logDir = $opt{OUTPUT_DIR}."/logs";
    
    if(! -e "$opt{OUTPUT_DIR}/jobs"){
	mkdir("$opt{OUTPUT_DIR}/jobs") or die "Couldn't create directory: $opt{OUTPUT_DIR}/jobs\n";
    }
    if(! -e "$opt{OUTPUT_DIR}/logs"){
	mkdir("$opt{OUTPUT_DIR}/logs") or die "Couldn't create directory: $opt{OUTPUT_DIR}/logs\n";
    }
    
    open OUT, ">$bashFile" or die "cannot open file $bashFile\n";
    print OUT "#!/bin/bash\n\n";
    print OUT "cd $opt{OUTPUT_DIR}\n";
    print OUT "$command\n";
    system "qsub -q $opt{POSTSTATS_QUEUE} -pe threaded $opt{POSTSTATS_THREADS} -o $logDir -e $logDir -N PICARD_$jobID -hold_jid ".join(",",@{$opt{RUNNING_JOBS}->{'all'} })." $bashFile"; #require two slots for memory reasons

}

sub readConfiguration{
    my $configuration = shift;
    
    my %opt = (
	
	'QUALIMAP_PATH'		=> undef,
	'SAMBAMBA_PATH'		=> undef,
	'CLUSTER_PATH'  	=> undef,
	'POSTSTATS_THREADS'	=> undef,
	'POSTSTATS_MEM'		=> undef,
	'POSTSTATS_QUEUE'	=> undef,
	'POSTSTATS_PROJECT'	=> undef,
	'POSTSTATS_TARGETS'	=> undef,
	'POSTSTATS_BAITS'	=> undef,
	'CLUSTER_TMP'		=> undef,
	'GENOME'		=> undef,
	'OUTPUT_DIR'		=> undef,
	'RUNNING_JOBS'		=> {} #do not use in .conf file
    );

    foreach my $key (keys %{$configuration}){
	$opt{$key} = $configuration->{$key};
    }

    if(! $opt{QUALIMAP_PATH}){ die "ERROR: No QUALIMAP_PATH found in .counf file\n" }
    if(! $opt{SAMBAMBA_PATH}){ die "ERROR: No SAMBAMBA_PATH found in .conf file\n" }
    if(! $opt{POSTSTATS_PROJECT}){ die "ERROR: No POSTSTATS_PROJECT found in .ini file\n" }
    if(! $opt{POSTSTATS_THREADS}){ die "ERROR: No POSTSTATS_THREADS found in .ini file\n" }
    if(! $opt{POSTSTATS_MEM}){ die "ERROR: No POSTSTATS_MEM found in .ini file\n" }
    if(! $opt{CLUSTER_PATH}){ die "ERROR: No CLUSTER_PATH found in .conf file\n" }
    if(! $opt{CLUSTER_TMP}){ die "ERROR: No CLUSTER_TMP found in .conf file\n" }
    if(! $opt{GENOME}){ die "ERROR: No GENOME found in .conf file\n" }
    if(! $opt{OUTPUT_DIR}){ die "ERROR: No OUTPUT_DIR found in .conf file\n" }
    if(! $opt{RUNNING_JOBS}){ die "ERROR: No RUNNING_JOBS found in .conf file\n" }

    return \%opt;
}


############
sub get_job_id {
   my $id = tmpnam(); 
      $id=~s/\/tmp\/file//;
   return $id;
}

sub bashAndSubmit {
    my $command = shift;
    my $sample = shift;
    my %opt = %{shift()};
    
    my $jobID = get_job_id();
    my $bashFile = $opt{OUTPUT_DIR}."/".$sample."/jobs/PICARD_".$sample."_".$jobID.".sh";
    my $logDir = $opt{OUTPUT_DIR}."/".$sample."/logs";
    
    open OUT, ">$bashFile" or die "cannot open file $bashFile\n";
    print OUT "#!/bin/bash\n\n";
    print OUT "cd $opt{OUTPUT_DIR}\n";
    print OUT "$command\n";
    
    if ( $opt{RUNNING_JOBS}->{$sample} ){
	system "qsub -q $opt{POSTSTATS_QUEUE} -pe threaded $opt{POSTSTATS_THREADS} -o $logDir -e $logDir -N PICARD_$jobID -hold_jid ".join(",",@{$opt{RUNNING_JOBS}->{$sample} })." $bashFile"; #require two slots for memory reasons
    } else {
	system "qsub -q $opt{POSTSTATS_QUEUE} -pe threaded $opt{POSTSTATS_THREADS} -o $logDir -e $logDir -N PICARD_$jobID $bashFile"; #require two slots for memory reasons
    }
    print "\n\n";

    return "PICARD_$jobID";
}

############ 

1;